extern def puts(*Byte): Void = puts
def main(): Void {
    val box = Box(b"associated method")

    for_each(&box) |value| {
        puts(*value)
    }
}
trait Iterable[Self] {
    type Item

    def for_each(self: *Self, fn: |*Item| -> Void): Void
}

def for_each[Self](value: *Self, fn: |*Iterable[Self].Item| -> Void): Void where Iterable[Self] {
    Iterable[Self].for_each(value, fn)
}

struct Box[T] {
    val value: T
}

implementation [T] Iterable[Box[T]] {
    type Item = T
    def for_each(self: *Box[T], fn: |*Item| -> Void): Void {
        fn(self.value)
    }
}

extension IterableExtensions[T] for T where Iterable[T] {
    def for_each(*this, fn: |*Iterable[T].Item| -> Void): Void {
        Iterable[T].for_each(this, fn)
    }
}
