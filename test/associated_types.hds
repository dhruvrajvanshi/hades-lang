extern fn puts(*cchar): Void = puts
fn main(): Void {
    val box = Box(c"associated method")

    for_each(&box) |value| {
        puts(*value)
    }
}
interface Iterable[Self] {
    type Item

    fn for_each(self: *Self, f: |*Item| -> Void): Void
}

fn for_each[Self](value: *Self, f: |*Iterable[Self].Item| -> Void): Void where Iterable[Self] {
    Iterable[Self].for_each(value, f)
}

struct Box[T] {
    val value: T
}


implementation [T] Iterable[Box[T]] {
    type Item = T
    fn for_each(self: *Box[T], f: |*Item| -> Void): Void {
        f(&self.value)
    }
}

extension IterableExtensions[T] for T where Iterable[T] {
    fn for_each(*this, f: |*Iterable[T].Item| -> Void): Void {
        Iterable[T].for_each(this, f)
    }
}
