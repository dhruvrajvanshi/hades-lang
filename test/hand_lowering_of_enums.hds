import hades.libhdc.{ file_put_cstr, file_put_usize, file_put_u8, get_stdout, file_put_void_ptr }
import hades.memory as Mem

fn main(): void {
    val stdout = get_stdout()
    val discriminant = B_constructor(1)
    match discriminant.tag {
            0 -> {
                file_put_cstr(stdout, b"A")
            }
            1 -> {
                val payload_ptr: *B = pointer_cast[B](&discriminant.payload)
                val payload: B = *payload_ptr
                val value = payload._1
                file_put_cstr(stdout, b"B(")
                file_put_usize(stdout, value)
                file_put_cstr(stdout, b")\n")
            }
            _ -> {
                file_put_cstr(stdout, b"FAIL")
            }
    }
}

struct Bytecode {
    val tag: u8
    val payload: union<A, B>
}

struct A {
    val _1: u8
    val _2: u64
}

struct B {
    val _1: usize
}

fn B_constructor(_1: usize): Bytecode {
    val mut result: Bytecode = #uninitialized
    result.tag = 1
    val mut payload_ptr = &mut result.payload
    val mut payload_ptr_casted = pointer_cast[B](payload_ptr)
    payload_ptr_casted._1 = _1
    return result
}

fn dump_ptr[T](ptr: *T): Void {
    file_put_void_ptr(get_stdout(), pointer_cast[Void](ptr))
    file_put_cstr(get_stdout(), b"\n")
}
