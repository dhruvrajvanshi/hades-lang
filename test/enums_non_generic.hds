
enum Foo {
    A
    B(value: u32)
    C(value1: u32, value2: u32)
}

fn main(): Void {
    val a: Foo = Foo.A
    val b = Foo.B(10)
    val c = Foo.C(20, 30)

    val a_pass = match a {
        A -> true,
        B -> false,
        C -> false
    }

    if not a_pass {
        puts(b"a FAIL")
    }

    val b_pass = match b {
        B(val value) -> value == 10,
        A -> false,
        C -> false
    }

    if not b_pass {
        puts(b"b FAIL")
    }

    val c_pass = match c {
        C(val value1, val value2) -> value1 == 20 and value2 == 30,
        B -> false,
        A -> false
    }

    if not c_pass {
        puts(b"c FAIL")
    }

    if not a_pass or not b_pass or not c_pass {
        exit(1)
    }

    puts(b"PASS")
}

extern fn puts(*u8): Bool = puts
extern fn exit(u32): Void = exit
