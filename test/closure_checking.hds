
struct S {
    val closure: || -> Void;
}

enum T {
    V(closure: || -> Void);
}

type ReturnsClosure = fn() -> || -> Void;

fn returns_closure(): || -> Void {
}

fn apply[T, U](value: T, closure: |T| -> U): U {
    val c = closure;
    val addr = &c;
    return closure(value);
}

fn main(): Void {

}
