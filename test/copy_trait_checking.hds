
@Derive(Copy)
struct Copyable {
    val value: u32
    val value2: *Byte
}

struct Ptr[T] {
    val value: *T
}

struct Box[T] {
    val mut value: T
}

@Derive(Copy)
struct InvalidDerive {
    val value: Ptr[u32]
}

@Derive(Copy)
sealed type InvalidDeriveSealedType {
    T(value: Ptr[u32]);
}

def main(): Void {
    val mut c = Copyable(1, b"test")
    c = Copyable(2, b"test")

    val mut c2 = Ptr(b"test")

    c2 = Ptr(b"test 2")


    val mut box = Box(Ptr(b"test 4"))
    box.value = c2

    val mut ptr_ptr = &mut c2
    *ptr_ptr = Ptr(b"test 3")


    consume(c2)

    consume(true)

    consume(Ptr(b"test 5"))
}

def consume[T](value: T): Void {}