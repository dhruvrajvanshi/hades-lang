import submodule.printable_interface as p;
import libc as c;

fn main(): Void {
    val opt = Optional.Some(10);
    print(get_int_value(Optional.Some(10)));
    print(get_int_value(Optional.Some(20)));
    print(get_int_value(Optional.None[Int]));

    val opt_message = Optional.Some[*Byte](c"message");
    val opt_message_none = Optional.None[*Byte];
    c.puts(get_string_value(opt_message));
    c.puts(get_string_value(opt_message_none));
}

fn print[T](value: T): Void where p.Printable[T] {
    p.Printable[T].print(value);
}

fn get_string_value(value: Optional[*Byte]): *Byte {
    return match value {
        Some(val v) -> v,
        None -> c"None"
    };
}

fn get_int_value(value: Optional[Int]): Int {
    return match value {
        Some(val v) -> v,
        None -> 0
    };
}

enum Optional[T] {
    Some(value: T);
    None;
}

