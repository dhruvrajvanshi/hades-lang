import libc as c;

fn main(): Void {
    print(c"main start");
    defer print(c"defer 1")
    defer print(c"defer 2")

    if true {
        print(c"if true start");
        defer print(c"defer 3")
        print(c"if true end");
    }

    if false {
        defer print(c"DON'T PRINT")
    }

    print(c"calling f");
    f();
    print(c"f returned");


    if true {
        defer print(c"nested outer")
        if true {
            defer print(c"nested inner")
            print(c"before nested inner");
        }
        print(c"inner nested block done");
    }

    print(c"main end");
}

fn f(): Void {
    print(c"f start");
    defer print(c"defer 4")
    defer print(c"defer 5")
    print(c"f end");
}
fn print(msg: *u8): void {
    c.puts(msg)
}
