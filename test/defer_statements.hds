import libc as c;

fn main(): Void {
    c.puts(b"main start");
    defer c.puts(b"defer 1");
    defer c.puts(b"defer 2");

    if true {
        c.puts(b"if true start");
        defer c.puts(b"defer 3");
        c.puts(b"if true end");
    }

    if false {
        defer c.puts(b"DON'T PRINT");
    }

    c.puts(b"calling f");
    f();
    c.puts(b"f returned");


    if true {
        defer c.puts(b"nested outer");
        if true {
            defer c.puts(b"nested inner");
            c.puts(b"before nested inner");
        }
        c.puts(b"inner nested block done");
    }

    c.puts(b"main end");
}

fn f(): Void {
    c.puts(b"f start");
    defer c.puts(b"defer 4");
    defer c.puts(b"defer 5");
    c.puts(b"f end");
}
