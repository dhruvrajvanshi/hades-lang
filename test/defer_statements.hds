import libc as c;

fn main(): Void {
    print(b"main start");
    defer print(b"defer 1")
    defer print(b"defer 2")

    if true {
        print(b"if true start");
        defer print(b"defer 3")
        print(b"if true end");
    }

    if false {
        defer print(b"DON'T PRINT")
    }

    print(b"calling f");
    f();
    print(b"f returned");


    if true {
        defer print(b"nested outer")
        if true {
            defer print(b"nested inner")
            print(b"before nested inner");
        }
        print(b"inner nested block done");
    }

    print(b"main end");
}

fn f(): Void {
    print(b"f start");
    defer print(b"defer 4")
    defer print(b"defer 5")
    print(b"f end");
}
fn print(msg: *u8): void {
    c.puts(msg)
}
