

struct Pair[T, U] {
    val first: T
    val second: U
}

trait Iterable[Self, T] {
    def for_each(self: *Self, f: |T| -> Void): Void
}

extension IterableExtensions[Self, T] for Self where Iterable[Self, T] {
    def for_each(*this, f: |T| -> Void): Void {
        Iterable[Self, T].for_each(this, f)
    }
}

implementation[T] Iterable[Pair[T, T], T] {
    def for_each(self: *Pair[T, T], f: |T| -> Void): Void {
        f(self.first)
        f(self.second)
    }
}

def main(): Void {
    val _pair = Pair(b"Hello", b"World")
    val pair = &_pair

    pair.for_each |value| {
        puts(value);
    }
}

extern def puts(*Byte): Void = puts
