
fn foo[T](first: T, second: T): Void {
}

fn main(): Void {
    val x: usize = 1

    // The analyzer bug here was in the function checking if
    // a type is int literal assignable wasn't considering the
    // fact that the type might be a generic instantiation
    // The fix required adding a call to reduceGenericInstances
    // in Analyzer.isIntLiteralAssignable before matching on the
    // type in case the actual type is a generic instantiation

    // at this point foo: |Generic(1), Generic(1)| -> Void
    foo(
        x, // after checking x, x: Generic(1) == x: usize
        // here, expected type of second arg is Generic(1)
        // but after checking previous arg, we know that Generic(1) == usize
        // previously, we were checking that Generic(1) is not an integral type
        // and then giving up on checking, falling back to inferring '2', which lead to
        // i32 (default int literal type)
        2
    )
}
