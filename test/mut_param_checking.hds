
fn main(): Void {}

fn non_ref_struct(mut f: Plain): Void {}
fn ref_struct(mut f: RefS): Void {}
fn generic_ref_struct(mut f: Box[u32]): Void {}
fn primitive(mut f: u32): Void {}

fn associated_type(mut f: Foo[Box[Bool]].Boxed): Void {}
fn associated_type_unboxed(mut f: Foo[Box[Bool]].Unboxed): Void {}

struct Plain {
    val value: Bool
}

struct RefS ref {
    val value: Bool
}

struct Box[T] ref {
    val value: Bool
}

trait Foo[Self] {
    type Boxed
    type Unboxed
}

implementation[T] Foo[Box[T]] {
    type Boxed =  Box[T]
    type Unboxed = T
}
