
def main(): Void {}

def non_ref_struct(mut f: Plain): Void {}
def ref_struct(mut f: RefS): Void {}
def generic_ref_struct(mut f: Box[u32]): Void {}
def primitive(mut f: u32): Void {}

def associated_type(mut f: Foo[Box[Bool]].Boxed): Void {}
def associated_type_unboxed(mut f: Foo[Box[Bool]].Unboxed): Void {}

struct Plain {
    val value: Bool
}

struct RefS ref {
    val value: Bool
}

struct Box[T] ref {
    val value: Bool
}

trait Foo[Self] {
    type Boxed
    type Unboxed
}

implementation[T] Foo[Box[T]] {
    type Boxed =  Box[T]
    type Unboxed = T
}