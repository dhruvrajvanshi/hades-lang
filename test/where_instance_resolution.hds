
fn main(): Void {
    requires_I(10);
    requires_I(true);
    requires_I(Box(10));
    requires_I(Box(true));
}

fn requires_I[T](value: T): Void where I[T] {
}

fn requires_I_1[T](value: T): Void where I[T] {
    requires_I(value);
}

fn requires_I_U[U](value: Box[U]): Void where I[U] {
    requires_I(value);
}

implementation I[Bool] {
}

implementation[T] I[Box[T]] where I[T] {
}

struct Box[T] {
    val value: T;
}

trait I[This] {}
