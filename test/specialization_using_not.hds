struct Box[T] {}
interface Foo[T] {
    fn foo(): Void
}
implementation Foo[Bool] {
    fn foo(): Void {}
}

implementation[T] Foo[Box[T]] where Foo[T] {
    fn foo(): Void {
        puts(c"Contains Foo")
    }
}
implementation[T] Foo[Box[T]] where not Foo[T] {
    fn foo(): Void {
        puts(c"Does not contain Foo")
    }
}

fn foo[T](): Void where Foo[T] {
    Foo[T].foo()
}
fn main(): Void {
    foo[Box[Bool]]()
    foo[Box[usize]]()
}


extern fn puts(*cchar): Void = puts
