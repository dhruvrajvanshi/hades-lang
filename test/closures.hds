extern def puts(*Byte): Void = puts;

def main(): Void {
    val capture = b"capture";
    val print_str = |str: *Byte|: *Byte {
        puts(capture);
        puts(b"printing string");
        puts(str);
        return b"result";
    };

    val result = print_both_and_return_second[Bool, *Byte, *Byte](true, b"hello", |b| {
        puts(capture);
        puts(b"printing boolean");
        if b {
            puts(b"true");
        } else {
            puts(b"false");
        }
    }, print_str);

    puts(b"closure application returned value");
    puts(result);

    val capture1 = true;
    puts(apply(true, |value| if (value) b"true" else b"false"));

    puts(apply(false, |value| if (value and capture1) b"true" else b"false"));
}

def print_both_and_return_second[T1, T2, T2R](first: T1, second: T2, print_first: |T1| -> Void, print_second: |T2| -> T2R): T2R {
    print_first(first);
    return print_second(second);
}

// struct Closure[Result] {
//   val ctx: *Void;
//   val fp: *() -> Result;
// }
def apply[T, U](value: T, fn: |T| -> U): U {
    return fn(value);
}

// def apply[T, U](value: T, fn: Closure[U]): U {
//   val fp = pointer_cast[(T, *Void) -> U](fn.fp);
//   return fp(tmp$1, fn.ctx);
// }
