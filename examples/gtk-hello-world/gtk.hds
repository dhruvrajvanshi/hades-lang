type CInt = i32
struct Application {}
struct Window {}
struct ButtonBox {}
struct Widget {}
struct Container {}
struct Button {}
struct CheckButton {}
struct ProgressBar {}

trait IsContainer[Self] {}

trait IsWidget[Self] {}

implementation IsWidget[Application] {}
implementation IsWidget[Window] {}
implementation IsWidget[Button] {}
implementation IsWidget[Widget] {}
implementation IsWidget[ButtonBox] {}
implementation IsWidget[CheckButton] {}
implementation IsWidget[ProgressBar] {}
implementation IsWidget[Container] {}
implementation IsContainer[ButtonBox] {}
implementation IsContainer[Window] {}
implementation IsContainer[Container] {}


const APPLICATION_FLAGS_NONE: i32 = 0
extern fn application_new(*Byte, CInt): *Application = gtk_application_new
extern fn object_unref(*Application): Void = gtk_object_unref
extern fn application_window_new(*Application): *Window = gtk_application_window_new
extern fn window_set_default_size(*Window, CInt, CInt): Void = gtk_window_set_default_size
extern fn window_set_title(*Window, *Byte): Void = gtk_window_set_title
extern fn button_box_new(u32): *ButtonBox = gtk_button_box_new
extern fn progress_bar_new(): *ProgressBar = gtk_progress_bar_new;
extern fn progress_bar_set_text(*ProgressBar, *Byte): Void = gtk_progress_bar_set_text;
extern fn button_new_with_label(*Byte): *Button = gtk_button_new_with_label
extern fn container_add(*Container, *Widget): Void = gtk_container_add
extern fn widget_show_all(*Widget): Void = gtk_widget_show_all
extern fn print(*Byte): Void = g_print
extern fn gtk_widget_destroy(*Widget): Void = gtk_widget_destroy
extern fn signal_connect_data(*Widget, *Byte, *Void, *Void, *Void, CInt): Void = g_signal_connect_data
extern fn application_run(*Application, CInt, **Byte): CInt = g_application_run
extern fn check_button_new_with_label(*Byte): *CheckButton = gtk_check_button_new_with_label


fn widget_destroy[W](widget: *W): Void where IsWidget[W] {
    gtk_widget_destroy(widget.as_widget())
}

fn signal_connect_swapped(instance: *Widget, signal: *Byte, handler: *Void, data: *Void): Void {
    signal_connect_data(instance, signal, handler, data, nullptr, 2)
}

fn signal_connect[W](instance: *W, signal: *Byte, handler: *Void, data: *Void): Void where IsWidget[W] {
   signal_connect_data(WIDGET(instance), signal, handler, data, nullptr, 0)
}

fn CONTAINER[T](ptr: *T): *Container where IsContainer[T] {
    return pointer_cast[Container](ptr)
}

fn WIDGET[T](ptr: *T): *Widget where IsWidget[T] {
    return pointer_cast[Widget](ptr)
}

fn CALLBACK[T](ptr: *T): *Void {
    return pointer_cast[Void](ptr)
}

extension ContainerExtensions[T] for T where IsContainer[T] {
    fn as_container(*this): *Container {
        return CONTAINER(this)
    }
}

extension WidgetExtensions[T] for T where IsWidget[T] {
    fn as_widget(*this): *Widget {
        return WIDGET(this)
    }
    fn connect(*this, signal: *Byte, handler: *Void, data: *Void): *T {
        signal_connect(this.as_widget(), signal, handler, data)
        return this
    }
}

extension ApplicationExtensions for Application {
    fn new_window(*this): *Window {
        return application_window_new(this)
    }
}

extension WindowExtensions for Window {
    fn set_title(*this, title: *Byte): *Window {
        window_set_title(this, title)
        return this
    }

    fn set_default_size(*this, x: CInt, y: CInt): *Window {
        window_set_default_size(this, x, y)
        return this
    }
}

extension ContainerExtensions[C] for C where IsContainer[C] {
    fn add[W](*this, widget: *W): *C where IsWidget[W] {
        container_add(CONTAINER(this), WIDGET(widget))
        return this
    }
}

extension WidgetExtensions for Widget {
    fn show_all(*this): Void {
        widget_show_all(this)
    }
}

extension ProgressBarExtensions for ProgressBar {
    fn set_text(*this, text: *Byte): *ProgressBar {
        progress_bar_set_text(this, text)
        return this
    }
}
