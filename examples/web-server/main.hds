import libc as c;
import hades.memory as mem;
import example.StringView as StringView;
import example.http.Request as HTTPRequest;
import example.logging as log;
import example.panic.{panic_with_errno};

extern fn bind_socket(u16): i32 = bind_socket;

type FileDescriptor = c.FileDescriptor;

type CInt = c.CInt;

const MAXMSG: Size = 1024;
const PORT: u16 = 5000;
const MAX_PENDING_CONNECTIONS: CInt = 1;

fn main(): Void {
    val socket = bind_socket(PORT);
    log.info(c"socket bound");

    val listen_result = c.listen(socket, MAX_PENDING_CONNECTIONS);
    if listen_result < 0 {
        panic_with_errno(c"main/listen");
    }

    log.info(c"listening on socket");

    while true {
        log.info(c"waiting for client connection");
        val fd = c.accept(socket, nullptr, nullptr);
        if fd < 0 {
            panic_with_errno(c"accept");
        }
        log.info(c"received connection");
        handle_connection(fd);
    }
}

const MAX_REQUEST_SIZE: Size = 4096;

fn handle_connection(fd: FileDescriptor): Void {
    log.info(c"handle connection");

    val request_text_buffer = c.malloc(MAX_REQUEST_SIZE * size_of[Byte]);
    defer mem.free(request_text_buffer);

    val read_bytes = c.read(fd, request_text_buffer, MAX_REQUEST_SIZE);
    if (read_bytes < 0) {
        panic_with_errno(c"handle_connection/read(request_fd)");
    }

    val request_text: *Byte = pointer_cast[Byte](request_text_buffer)

    val request_str = StringView.t(request_text, read_bytes as usize);
    val request = HTTPRequest.from_string_view(request_str);

    log.info(c"Got request: ");
    log.info(pointer_cast[Byte](request_text));

    val response_body = c"
<html>
    <head>
        <title>Sample web server built with sys/socket.h</title>
    </head>
    <body>
        <h1>Hello socket.h</h1>
    </body>
</html>
    ";
    val body_length_str = size_to_string(c.strlen(response_body));
    defer mem.free(body_length_str);

    http_write_line(fd, c"HTTP/1.1 200 OK");
    http_write(fd, c"Content-length: ");
    http_write_line(fd, body_length_str);

    http_write_line(fd, c"Content-type: text/html");

    http_write_line(fd, c"");

    http_write(fd, response_body);

    val close_result = c.close(fd);
    if close_result < 0 {
        panic_with_errno(c"handle_connection/close(fd)");
    }
}

fn http_write(response_fd: FileDescriptor, text: *Byte): Void {
    val result = c.write(response_fd, pointer_cast[Void](text), c.strlen(text));
    if result < 0 {
        panic_with_errno(c"http_write/write");
    }
}

fn http_write_line(response_fd: FileDescriptor, text: *Byte): Void {
    http_write(response_fd, text);
    http_write(response_fd, c"\r\n");
}

/// allocates a new string; caller needs to free
extern fn size_to_string(Size): *mut Byte = size_to_string;
