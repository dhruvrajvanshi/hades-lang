import libc as c;
import hades.memory as mem;
import example.StringView.{ToStringView}

def fatal[T](text: T): Void where ToStringView[T] {
    log(b"FATAL", text);
}

def info[T](text: T): Void where ToStringView[T] {
    log(b"INFO", text);
}

def error[T](text: T): Void where ToStringView[T] {
    log(b"ERROR", text);
}

def debug[T](text: T): Void where ToStringView[T] {
    log(b"DEBUG", text);
}

def log_value[T](tag: *Byte, value: T, copy_to_c: *|T| -> *mut Byte): Void {
    val c_str = copy_to_c(move value);
    defer mem.free(pointer_cast[Byte](c_str));

    val immutable: *Byte = pointer_cast[Byte](c_str)
    log(tag, immutable);
}

def log[T](tag: *Byte, text: T): Void where ToStringView[T] {
    c.fputs(tag, c.stderr());
    c.fputs(b": ", c.stderr());
    val copy = text.to_string_view().copy_to_c()
    defer mem.free(copy)
    c.fputs(copy, c.stderr());
    c.fputs(b"\n", c.stderr());   
}