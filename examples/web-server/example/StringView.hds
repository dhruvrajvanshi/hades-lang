import libc as c;
import example.logging as log;
import example.assert.{assert};
import hades.memory as mem;
import example.debug as Debug;

@Derive(Copy)
struct t {
    val m_buffer: *Byte;
    val m_length: Size;
}

def from_c_string(cstr: *Byte): t {
    return t(cstr, c.strlen(cstr));
}

const from_c = from_c_string;

extension StringViewExtensions for t {
    
    def buffer(this): *Byte {
        return this.m_buffer;
    }
    
    def length(this): Size {
        return this.m_length;
    }

    def offset(this, offset: Size): Byte {
        assert(offset < this.length(), b"StringView.offset: Overflow");
        return *mem.pointer_add(this.buffer(), offset);
    }

    def equals(this, that: t): Bool {
        if this.length() != that.length() {
            return false;
        }
        val mut i: Size = 0;
        while i < this.length() {
            if this.offset(i) != that.offset(i) {
                return false;
            }
            i = i + 1;
        }
        return true;
    }
    
    def equals_c(this, that: *Byte): Bool {
        return this.equals(that |> from_c_string);
    }

    def take(this, length: Size): t {
        assert(this.length() >= length, b"StringView.take(); length overflow");
        return t(this.buffer(), length);
    }

    def drop(this, length: Size): t {
        assert(this.length() >= length, b"StringView.drop(); length overflow");
        return t(mem.pointer_add(this.buffer(), length), this.length() - length);
    }

    def starts_with(this, start: t): Bool {
        if this.length() < start.length() {
            return false;
        }
        return this.take(start.length()).equals(start);
    }

    def starts_with_c(this, start: *Byte): Bool {
        return this.starts_with(start |> from_c_string);
    }

    def drop_first_word(this): t {
        val mut i: Size = 0;
        while i < this.length() and not is_whitespace(this.offset(i)) {
            i = i + 1;
        }

        while is_whitespace(this.offset(i)) {
            i = i + 1;
        }

        return this.drop(i);
    }

    def take_first_word(this): t {
        val mut i: Size = 0;
        while i < this.length() and not is_whitespace(this.offset(i)) {
            i = i + 1;
        }
        return this.take(i);
    }

    def copy_to_c(this): *mut Byte {
        val buffer = mem.allocate[Byte](this.length() + 1);
        val end_ptr: *mut Byte = mem.mut_pointer_add(buffer, this.length());
        *end_ptr = 0;
        mem.copy(buffer, this.buffer(), this.length());
        return buffer;
    }

    def log(this): Void {
        log.debug(this.buffer());
    }
}

def copy_to_c(self: t): *mut Byte {
    return self.copy_to_c();
}

def is_whitespace(char: Byte): Bool {
    return char == 9 or char == 10 or char == 13 or char == 32;
}

