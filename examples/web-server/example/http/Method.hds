import example.StringView as StringView;
import example.assert.{unreachable};
import example.logging as log;

struct t {
    val m_value: u8;
}

fn GET(): t {
    return t(1);
}

fn POST(): t {
    return t(2);
}

fn PUT(): t {
    return t(3);
}

fn DELETE(): t {
    return t(4);
}

fn from_string_view(method: StringView.t): t {
    if method.equals(c"GET") {
        return t(1);
    }
    if method.equals(c"POST") {
        return t(2);
    }
    if method.equals(c"PUT") {
        return t(3);
    }
    if method.equals(c"DELETE") {
        return t(4);
    }
    log.error(c"Invalid method: ");
    log.error(method.buffer());
    unreachable || c"Invalid method";
    return t(0);
}

fn from_c_string(method: *Byte): t {
    return from_string_view(StringView.from_c_string(method));
}

extension MethodExtensions for t {
    fn equals(this, that: t): Bool {
        return this.m_value == that.m_value;
    }
}
