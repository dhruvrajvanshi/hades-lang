const type_Invalid = 0;
const type_False   = 1;
const Type_True    = 2;
const Type_NULL    = 4;
const Type_Number  = 8;
const Type_String  = 16;
const Type_Array   = 32;
const Type_Object  = 64;
const Type_Raw     = 128;
struct t {
    val m_next: *t;
    val m_prev: *t;
    val m_child: *t;
    val m_type: CInt;
    val m_valuestring: *Byte;
    val m_valueint: CInt;
    val m_valuedouble: Double;
    val m_string: *Byte;
}

struct InitHooks {
    val malloc_fn: *(Size) -> *Void;
    val free_fn: *(*mut Void) -> Void;
}

extern fn init_hooks(*InitHooks): Void = cJSON_InitHooks;
extern fn Parse(*Byte): *mut t = cJSON_Parse;
extern fn Print(*t): *mut Byte = cJSON_Print;
extern fn PrintUnformatted(*t): *mut Byte = cJSON_PrintUnformatted;

extern fn GetObjectItem(*t, *Byte): *t = cJSON_GetObjectItem;
extern fn IsInvalid(*t): Bool = cJSON_IsInvalid;
extern fn IsFalse(*t): Bool = cJSON_IsFalse;
extern fn IsTrue(*t): Bool = cJSON_IsTrue;
extern fn IsBool(*t): Bool = cJSON_IsBool;
extern fn IsNull(*t): Bool = cJSON_IsNull;
extern fn IsNumber(*t): Bool = cJSON_IsNumber;
extern fn IsString(*t): Bool = cJSON_IsString;
extern fn IsArray(*t): Bool = cJSON_IsArray;
extern fn IsObject(*t): Bool = cJSON_IsObject;
extern fn IsRaw(*t): Bool = cJSON_IsRaw;
extern fn GetStringValue(*t): *Byte = cJSON_GetStringValue;
extern fn GetNumberValue(*t): Double = cJSON_GetNumberValue;

extern fn CreateObject(): *mut t = cJSON_CreateObject;
extern fn CreateString(*Byte): *mut t = cJSON_CreateString;
extern fn CreateNumber(Double): *mut t = cJSON_CreateNumber;
extern fn CreateBool(Bool): *mut t = cJSON_CreateBool;

extern fn AddItemToObject(*mut t, *Byte, *t): Bool = cJSON_AddItemToObject;

extern fn Delete(*mut t): Void = cJSON_Delete;

fn as_int(this: *t): Int {
    return *this.m_valueint;
}

