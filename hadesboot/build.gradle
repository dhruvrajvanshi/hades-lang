plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.5.10'
    id 'jacoco'
}

def logbackVersion = '1.2.5'
def slf4jVersion = "1.7.30"
group 'org.hades'

applicationName = 'hades'
mainClassName = 'hadesc.MainKt'

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "ch.qos.logback:logback-core:$logbackVersion"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "$slf4jVersion"
    implementation group: "org.apache.commons", name: 'commons-lang3', version: '3.10'
    implementation group: 'com.diogonunes', name: 'JColor', version: '5.0.0'
    implementation "com.github.ajalt.clikt:clikt:3.2.0"

    implementation "org.bytedeco:llvm-platform:12.0.1-1.5.6"

    testImplementation 'org.jetbrains.kotlin:kotlin-test:1.5.21'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
    }
}

test {
    workingDir = new File("..")
    environment['HADES_HOME'] = "."
    useJUnitPlatform()
    afterTest { descriptor, result ->
        logger.quiet "[TEST] [${result.resultType}] ${descriptor.className}::${descriptor.displayName}"
    }

    afterSuite { descriptor, result ->
        if (!descriptor.parent) {
            println()
            logger.quiet "[TESTS] [${result.resultType}] (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "15"
    kotlinOptions.useIR = true
    kotlinOptions {
        freeCompilerArgs = ["-Xinline-classes"]
        languageVersion = "1.5"
    }
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "15"
}

applicationDistribution.from('../stdlib') {
    into 'stdlib'
}

distributions {
    "windows-x86_64" {
        distributionBaseName = "hades-windows-x86_64"
        contents {
            with distributions.main.contents
            exclude("**/*linux*.jar")
            exclude("**/*macos*.jar")
            exclude("**/llvm-*-windows-armhf.jar")
            exclude("**/llvm-*-windows-arm64.jar")
            exclude("**/llvm-*-windows-ppc64le.jar")
            exclude("**/llvm-*-windows-x86.jar")
        }
    }

    "linux-x86_64" {
        distributionBaseName = "hades-linux-x86_64"
        contents {
            with distributions.main.contents
            exclude("**/*windows*.jar")
            exclude("**/*macos*.jar")
            exclude("**/llvm-*-linux-armhf.jar")
            exclude("**/llvm-*-linux-arm64.jar")
            exclude("**/llvm-*-linux-ppc64le.jar")
            exclude("**/llvm-*-linux-x86.jar")
        }
    }

    "macos-x86_64" {
        distributionBaseName = "hades-macos-x86_64"
        contents {
            with distributions.main.contents
            exclude("**/*windows*.jar")
            exclude("**/*linux*.jar")
            exclude("**/llvm-*-macos-armhf.jar")
            exclude("**/llvm-*-macos-arm64.jar")
            exclude("**/llvm-*-macos-ppc64le.jar")
            exclude("**/llvm-*-macos-x86.jar")
        }
    }
}

jacocoTestReport {
    reports {
        html.enabled = true
    }
}
