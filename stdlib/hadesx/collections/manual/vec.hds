import hadesx.ops.drop.{drop, Drop}
import hadesx.panic.{panic}
import hadesx.no_copy.{NoCopy}
import hades.memory as Mem
import hadesx.ops.for_each.{ForEach}

struct Vec[T] {
    val _buffer: *mut T
    val _size: usize
    val _capacity: usize
}

def empty[T](): Vec[T] {
    val buffer: *mut T = nullptr
    val capacity: usize = 0
    val size: usize = 0
    return Vec[T](
        nullptr,
        size,
        capacity
    )
}

extension VecExtensions[T] for Vec[T] {
    def push(*mut this, value: T): *mut Vec[T] {
        val mut self = this
        if self.capacity() <= self.size() {
            self._grow()
        }
        
        val ptr = Mem.offset_mut(self._buffer, self.size())
        *ptr = value

        self._size = self._size + 1

        return this
    }

    def size(*this): usize {
        return this._size
    }

    def capacity(*this): usize {
        return this._capacity
    }

    def _grow(*mut this): Void {
        val mut self = this
        if (self.capacity() == 0) {
            self._buffer = Mem.allocate(1)
            self._capacity = 1
        } else {
            val new_capacity = self._capacity * 2
            val old_buffer = self._buffer
            self._buffer = Mem.allocate(new_capacity)

            Mem.copy(self._buffer, old_buffer, self.size())
            Mem.free(old_buffer)

            self._capacity = new_capacity
        }
    }
}

implementation[T] Drop[Vec[T]] where not Drop[T] {
    def drop(self: Vec[T]): Void {
        if self._buffer != nullptr {
            Mem.free(self._buffer)
        }
    }
}

implementation[T] Drop[Vec[T]] where Drop[T] {
    def drop(self: Vec[T]): Void {
        if self._buffer != nullptr {
            Mem.free(self._buffer)
        }
    }
}
implementation[T] NoCopy[Vec[T]] {}

implementation[T] ForEach[Vec[T]] {
    type Item = T

    def for_each(self: *Vec[T], f: |*T| -> Void): Void {
        val mut current = self._buffer
        val end =
            if (self.size() != 0)
                Mem.offset(self._buffer, self.size())
            else
                nullptr

        while current != end {
            f(current)
            current = Mem.offset_mut(current, 1)
        }
    }
}