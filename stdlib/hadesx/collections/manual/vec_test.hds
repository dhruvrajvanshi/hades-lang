import hadesx.collections.vec.{Vec}
import hadesx.collections.vec as VecM
import hadesx.test.{test}
import hadesx.ops.drop.{drop, Drop}
import libc.{puts}
import hades.memory as Mem

import hadesx.ops.for_each.{for_each}

def main(): Void {
    test(b"Allocating and dropping empty vec with non drop types") || {
        val mut v = VecM.empty[usize](); defer drop(move v)
    }

    test(b"Allocating and droping empty vec with drop types") || {
        val mut v = VecM.empty[HasDrop](); defer drop(move v)
    }

    test(b"Push to empty vector") || {
        val mut v = VecM.empty[*u8](); defer drop(move v)
        val vec = &mut v
        vec.push(b"Hello")
           .push(b"World")
    }

    test(b"ForEach") || {
        val mut index: usize = 0
        val mut v = VecM.empty[*u8](); defer drop(move v)
        val vec = &mut v
        vec.push(b"Hello")
           .push(b"World")

         vec.for_each |it| {
            puts(*it)
         }
    }

    test(b"Drops members") || {
        // val mut v = VecM.empty[*u8]        
    }

}

struct Box[T] {
    val _ptr: *mut T
}

def new_box[T](): Box[T] {
    return Box[T](Mem.allocate(1))
}

struct HasDrop {}
implementation Drop[HasDrop] {
    def drop(self: HasDrop): Void {}
}