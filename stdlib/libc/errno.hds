type t = Int;

fn EPERM(): Int { return  1; }
fn ENOENT(): Int { return  2; }
fn ESRCH(): Int { return  3; }
fn EINTR(): Int { return  4; }
fn EIO(): Int { return  5; }
fn ENXIO(): Int { return  6; }
fn E2BIG(): Int { return  7; }
fn ENOEXEC(): Int { return  8; }
fn EBADF(): Int { return  9; }
fn ECHILD(): Int { return 10; }
fn EAGAIN(): Int { return 11; }
fn ENOMEM(): Int { return 12; }
fn EACCES(): Int { return 13; }
fn EFAULT(): Int { return 14; }
fn ENOTBLK(): Int { return 15; }
fn EBUSY(): Int { return 16; }
fn EEXIST(): Int { return 17; }
fn EXDEV(): Int { return 18; }
fn ENODEV(): Int { return 19; }
fn ENOTDIR(): Int { return 20; }
fn EISDIR(): Int { return 21; }
fn EINVAL(): Int { return 22; }
fn ENFILE(): Int { return 23; }
fn EMFILE(): Int { return 24; }
fn ENOTTY(): Int { return 25; }
fn ETXTBSY(): Int { return 26; }
fn EFBIG(): Int { return 27; }
fn ENOSPC(): Int { return 28; }
fn ESPIPE(): Int { return 29; }
fn EROFS(): Int { return 30; }
fn EMLINK(): Int { return 31; }
fn EPIPE(): Int { return 32; }
fn EDOM(): Int { return 33; }
fn ERANGE(): Int { return 34; }

fn description(err: Int): *Byte {
    if err == EPERM() {
        return c"EPERM: Operation not permitted";
    }
    if err == ENOENT() {
        return c"ENOENT: No such file or directory";
    }
    if err == ESRCH() {
        return c"ESRCH: No such process";
    }
    if err == EINTR() {
        return c"EINTR: Interrupted system call";
    }
    if err == EIO() {
        return c"EIO: I/O error";
    }
    if err == ENXIO() {
        return c"ENXIO: No such device or address";
    }
    if err == E2BIG() {
        return c"E2BIG: Argument list too long";
    }
    if err == ENOEXEC() {
        return c"ENOEXEC: Exec format error";
    }
    if err == EBADF() {
        return c"EBADF: Bad file number";
    }
    if err == ECHILD() {
        return c"ECHILD: No child processes";
    }
    if err == EAGAIN() {
        return c"EAGAIN: Try again";
    }
    if err == ENOMEM() {
        return c"ENOMEM: Out of memory";
    }
    if err == EACCES() {
        return c"EACCES: Permission denied";
    }
    if err == EFAULT() {
        return c"EFAULT: Bad address";
    }
    if err == ENOTBLK() {
        return c"ENOTBLK: Block device required";
    }
    if err == EBUSY() {
        return c"EBUSY: Device or resource busy";
    }
    if err == EEXIST() {
        return c"EEXIST: File exists";
    }
    if err == EXDEV() {
        return c"EXDEV: Cross-device link";
    }
    if err == ENODEV() {
        return c"ENODEV: No such device";
    }
    if err == ENOTDIR() {
        return c"ENOTDIR: Not a directory";
    }
    if err == EISDIR() {
        return c"EISDIR: Is a directory";
    }
    if err == EINVAL() {
        return c"EINVAL: Invalid argument";
    }
    if err == ENFILE() {
        return c"ENFILE: File table overflow";
    }
    if err == EMFILE() {
        return c"EMFILE: Too many open files";
    }
    if err == ENOTTY() {
        return c"ENOTTY: Not a typewriter";
    }
    if err == ETXTBSY() {
        return c"ETXTBSY: Text file busy";
    }
    if err == EFBIG() {
        return c"EFBIG: File too large";
    }
    if err == ENOSPC() {
        return c"ENOSPC: No space left on device";
    }
    if err == ESPIPE() {
        return c"ESPIPE: Illegal seek";
    }
    if err == EROFS() {
        return c"EROFS: Read-only file system";
    }
    if err == EMLINK() {
        return c"EMLINK: Too many links";
    }
    if err == EPIPE() {
        return c"EPIPE: Broken pipe";
    }
    if err == EDOM() {
        return c"EDOM: Math argument out of domain of func";
    }
    if err == ERANGE() {
        return c"ERANGE: Math result not representable";
    }
    return c"";
}
