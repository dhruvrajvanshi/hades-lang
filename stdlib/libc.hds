// TODO: do something better here. This isn't portable.
type CInt = i32;
type int = i32;
type uint = u32
type ulong = u64
type long = i64

extern def puts(*Byte): Void = puts;
extern def exit(CInt): Void = exit;
extern def malloc(Size): *mut Void = malloc;
extern def free(*mut Void): Void = free;
extern def strlen(*Byte): usize = strlen;
extern def strcat(*Byte, *Byte): *mut Byte = strcat;
extern def strcmp(*Byte, *Byte): CInt = strcmp;
extern def strcpy(*mut Byte, *Byte): *mut Byte = strcpy;
extern def memcpy(*Void, *Void, usize): Void = memcpy;
extern def memcmp(*Void, *Void, usize): CInt = memcmp;
extern def floor(Double): Double = floor;

extern def fprintf(*File, *Byte, *Byte): int = fprintf;
extern def printf(*Byte, *Byte): int = printf;
extern def sleep(uint): uint = sleep;
extern def fflush(*File): Void = fflush;

extern def fputs(*Byte, *File): Void = fputs;

struct File {}

extern def getline(*mut *mut Byte, *mut usize, *File): isize = getline;
extern def fgetc(*File): Byte = fgetc;
extern def strtoul(*Byte, **Byte, u32): ulong = strtoul;


extern def fread(*Void, usize, usize, *File): usize = fread;

type FileDescriptor = int;
extern def read(FileDescriptor, *mut Void, usize): isize = read;
extern def write(FileDescriptor, *Void, usize): isize = write;

extern def errno(): int = hdc_errno;
extern def strerror(CInt): *Byte = strerror;
extern def set_errno(CInt): Void = hdc_set_errno;

extern def open(*Byte, CInt): CInt = open;

extern def stdout(): *File = hdc_get_stdout;
extern const stdin: *File = stdin;
extern def stderr(): *File = hdc_get_stderr;

extern def perror(*Byte): Void = perror;

extern def listen(CInt, CInt): CInt = listen;

struct sockaddr {}
struct socklen_t {}
extern def accept(CInt, *mut sockaddr, *mut socklen_t): CInt = accept;
extern def close(CInt): CInt = close;


const EOF: int = -1

const SEEK_SET: int = 0
const SEEK_CUR: int = 1
const SEEK_END: int = 2

/// fseek(file, offset, whence)
/// whence should be SEEK_SET or SEEK_CUR or SEEK_END
extern def fseek(*File, long, int): i32 = fseek

extern def ftell(*File): long = ftell

/// fopen(file, mode)
extern def fopen(*Byte, *Byte): *File = fopen
extern def fclose(*File): int = fclose
extern def rewind(*File): Void = rewind
extern def feof(*File): int = feof
extern def ferror(*File): int = ferror
extern def fileno(*File): int = fileno
extern def abort(): Void = abort

type pid_t = int
extern def fork(): pid_t = fork

/// https://man7.org/linux/man-pages/man2/waitpid.2.html
extern def waitpid(pid_t, *int, int): pid_t = waitpid
extern def wait(*int): pid_t = wait
