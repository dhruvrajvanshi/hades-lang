import libc as libc;
import hades.libhdc as hdc

def free[T](ptr: *mut T): Void {
    libc.free(pointer_cast[Void](ptr));
}

def unsafe_allocate_unitialized[T](): *T {
    return pointer_cast[T](libc.malloc(size_of[T]));
}

def __hds_pointer_add(ptr: *Void, size: usize): *mut Void {
    return @intrinsic.int_to_ptr[*mut Void](
        @intrinsic.ptr_to_int(ptr) + size
    )
}

def mut_pointer_add[T](ptr: *mut T, size: usize): *mut T {
    return pointer_cast[T](__hds_pointer_add(pointer_cast[Void](ptr), size));
}

def pointer_add[T](ptr: *T, size: Size): *T {
    return pointer_cast[T](__hds_pointer_add(pointer_cast[Void](ptr), size));
}

def offset[T](self: *T, index: Size): *T {
    return pointer_cast[T](__hds_pointer_add(pointer_cast[Void](self), index * size_of[T]));
}
def offset_mut[T](self: *mut T, index: Size): *mut T {
    return pointer_cast[T](__hds_pointer_add(pointer_cast[Void](self), index * size_of[T]));
}

def copy[T](destination: *mut T, source: *T, count: Size): Void {
    @intrinsic.memcpy(
        destination,
        source,
        count * size_of[T]
    )
}

def allocate[T](count: Size): *mut T {
    return pointer_cast[T](libc.malloc(count * size_of[T]));
}

/// Set all bits of the given pointer to zero
def fill_with_zeros[T](ptr: *mut T): Void {
   hdc.memset(pointer_cast[Void](ptr), 0, size_of[T])
}

