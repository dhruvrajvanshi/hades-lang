import hades.memory as Mem
struct Array[T] {
    val m_ptr: *mut T
    val m_size: Size
}

def new_array[T](size: Size): Array[T] {
    return Array(
        Mem.allocate[T](size),
        size
    )
}

extension ArrayExtensions[T] for Array[T] {
    def get(*this, index: Size): *T {
        return Mem.offset(*this.m_ptr, index)
    }

    def get_mut(*this, index: Size): *mut T {
        return Mem.offset_mut(*this.m_ptr, index)
    }

    def set(*mut this, index: Size, value: T): Void {
        val mut ptr = Mem.offset_mut(*this.m_ptr, index)
        *ptr = value
    }
}